[[language]]
name = "python"
# language-servers = ["basedpyright", "ruff"]
language-servers = ["basedpyright"]
file-types = ["py", "ipynb"]
auto-format = true
# formatter = { command = "sh", args = [
#   "-c",
#   "uvx ruff check --fix - | uvx ruff format -",
# ] }

[language-server.basedpyright]
command = "uvx"
args = ["--from", "basedpyright", "basedpyright-langserver", "--stdio"]

[language-server.basedpyright.config.basedpyright.analysis]
autoImportCompletions = true
diagnosticMode = "openFilesOnly"
typeCheckingMode = "standard"
inlayHints.callArgumentNames = false
verboseOutput = true
logLevel = "trace"

# [language-server.ruff]
# command = "uvx"
# args = ["ruff", "server"]
# environment = { "RUFF_TRACE" = "messages" }

# [language-server.ruff.config.settings.lint]
# select = [
#   "E",     # pycodestyle errors
#   "W",     # pycodestyle warnings
#   "F",     # pyflakes
#   "B",     # flake8-bugbear
#   "I",     # isort
#   "RUF",   # ruff
#   "D",     # docstrings
#   "UP",    # pyupgrade
#   "ANN",   # annotations
#   "ASYNC", # async checks
#   "S",     # bandit (security)
#   "YTT",   # datetime checks
#   "A",     # builtins shadowing
#   "RET",   # return statements
#   "TCH",   # type-checking
#   "ARG",   # function args
#   "PTH",   # pathlib over os.path
#   # "ERA",   # 
#   "LOG",   # logging practices
#   "N",     # naming
#   "C4",    # comprehensions
#   "T10",   # debugger usage
#   "SIM",   # simplify code
#   "TRY",   # try/except
#   "C90",   # complexity
#   "PGH",   # pattern hooks
# ]
# ignore = [
#   "E501", # line too long
#   "E731", # do not assign lambda
#   "D205", # docstrings blank line spacing
#   "D100", # missing docstring in public module    
#   "D104", # missing docstring in public package
# ]

# [language-server.ruff.config.settings.lint.per-file-ignores]
# "tests/**" = ["S101", "D103"] # allow assertions, allow missing docstrings
